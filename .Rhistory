A
B <- matrix(5:8, nrow=2, byrow=T)
B
A * B
A %*% B
t(A)
colMeans(A)
rowSums(A)
diag(A)
x <- c(10,20)
x
diag(x)
diag(2)
diag(3)
A
solve(A) %*% A
solve(A)
A
solve(A)
solve(A) %*% A
# solve 역행렬 A-1
b<- c(5,6)
solve(A,b)
df1 <- data.frame(x=c(2,4,6), y=c("a","b","c"))
df1
str(df1)
#data.frame : 입력되는 벡터의 길이가 같아야함
#             길이가 1인 벡터 : 순환법칙 작용
data.frame(x=1, y=c("a","b","c")) #길이가 1인 벡터만 순환법칙 작용
length(df1)
df1
typeof(df1)
df1[1] # 결과 형태 데이터프레임
df1[[1]] # 결과 형태 벡터
typeof(df1[1])
typeof(df1[[1]])
df1[["x"]]
df1$x
df1[c(1,2), 1]
df1
df1[c(1,2),]
# with 편하게 데이터 프레임에 접근하는 방법
# with(dataframe, 명령문)
airquality
z.Temp <- (Temp-mean(Temp))/sd(Temp)
#Error: object 'Temp' not found
z.Temp <- (airquality$Temp-mean(airquality$Temp))/sd(airquality$Temp)
z.Temp <- with(airquality, (Temp-mean(Temp))/sd(Temp))
library(tidyverse)
as_tibble(cars)
tibble(x=1:3, y=x+1, z=1)
data.frame(x=1:3, y=x+1)
tribble(
~x, ~y,
1, "a",
2, "b",
3, "c"
)
data(Cars93, package="MASS")
Cars93
as_tibble(Cars93)
print(tbl, n=20, width=Inf)
head(mtcars)
mtcars_t <- as_tibble(mtcars)
print(mtcars_t, n=6)
mtcars_d <- rownames_to_column(mtcars, var="rowname")
View(mtcars)
View(mtcars_d)
df1 <- data.frame(xyz=1:3, abc=letters[1:3])
df1
df1$x # 부분 매칭을 허용한다. x로 xyz 열을 찾아서 반환
tb1 <- as_tibble(df1)
tb1$x #error
tb1
tb1$xyz
mtcars
typeof(mtcars)
mtcars[, 1:2]
mtcars[, 1]
mtcars[, 1:2]
mtcars[, 1]
mtcars_t[,1:2]
mtcars_t[,1]
mtcars_t[1,1]
#tibble형태는 인덱싱을해도 tiblle형태로 반환
View(mtcars_t)
x <- list(a=c("one","two","three"), b=1:3, c=list(-1,-5), d=data.frame(x1=c("s1","s2"), x2=1:2))
typeof(x)
typeof(x$d)
x
# list[a]: 결과는 리스트
# list[[a]] = list$a : 해당되는 구성요소의 객체 구조
x[1]
x[[1]]
str(x[1])
str(x[[1]])
x[[4]]
x$d
x[[4]][[2]]
x[[4]][2]
rm(list=ls())
#1
aa=data.frame(x1=c("11","12",t1=c(T,F),z1=factor(c(2,5))))
aa
#1
aa=data.frame(x1=c("11","12"),y1=c(T,F),z1=factor(c(2,5)))
aa
matrix(aa)
?matrix
as.matrix(aa)
as.matrix(as.numeric(aa))
as.numeric(aa)
#1
aa=data.frame(x1=c("11","12"),y1=c(T,F),z1=factor(c(2,5)))
aa[1]
as.numeric(aa[1])
as.numeric(aa[[1]])
as.numeric(aa[[c(1:3)]])
as.numeric(aa[[1:3]])
as.numeric(c(aa[[:]]))
as.numeric(c(aa[[2]]))
as.numeric(c(aa[[3]]))
#1
aa=data.frame(x1=c("11","12"),y1=c(T,F),z1=factor(c(2,5)))
aa[[3]]
as.numeric(aa[[3]])
?as.numeric
as.ordered(aa[[3]])
as.character(aa[[3]])
as.numeric(as.character(aa[[3]]))
as.vector(aa[[3]])
as.numeric_version(aa[[3]])
as.numeric(aa[[3]])
as.matrix(as.numeric(aa))
as.numeric(c(aa[[1]],aa[2]))
as.numeric(c(aa[[1]],aa[[2]]))
as.matrix(as.numeric(c(aa[[1]],aa[[2]])))
as.numeric(aa[[2]])
as.matrix(as.numeric(aa[[1]],aa[[2]])
as.matrix(as.numeric(aa[[1]],aa[[2]]))
as.matrix(as.numeric(aa[[1]],aa[[2]]))
as.matrix(as.numeric(aa[[1]],aa[[2]]))
as.matrix(as.numeric(c(aa[[1]],aa[[2]])))
as.matrix(as.numeric(aa[[1]]),as.numeric(aa[[2]]))
as.matrix(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.nueric(as.character(aa[[3]])))
as.matrix(as.numeric(aa))
as.numeric(aa[[3]])
as.numeric(aa[[2]])
source("~/Desktop/konkuk/2023 - 2/전산실습/2020.R", echo=TRUE)
as.numeric(aa[[1]])
as.numeric(aa[[2]])
as.matrix(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.nueric(as.character(aa[[3]])),nrow=3)
?as.numeric
?as.matrix
as.matrix(aa)
as.numeric(as.matrix(aa))
as.numeric(as.matrix(aa),nrow=3)
as.matrix(aa, colnames = NULL)
as.matrix(aa, colnames = FALSE)
as.matrix(numeric(aa))
as.matrix(aa)
?as.matrix
as.matrix(as.numeric(aa[[1]]),)
as.matrix(as.numeric(aa[[1]]))
as.matrix(as.numeric(aa[[1]]), as.numeric(aa[[2]]))
cbind(c(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]]))))
rbind(c(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]]))))
rbind(c(as.numeric(aa[[1]]),as.numeric(aa[[2]])))
cbind(c(as.numeric(aa[[1]]),as.numeric(aa[[2]])))
rbind(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]])))
cbind(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]])))
abc=list(a=c(5,10),matrix(c(1,1,1,2,2,2),nrow=2,byrow=T))
abc
abc[[1]]
abc[[1]] * abc[[2]]
q1=c(18,72,87,29,26,52)
q1
?diff
q1[seq(from=1,to=2)]
q1[seq(from=1,by=2)]
seq(from=1,by=2)
?seq
seq(1, 9, by = 2)
q1[seq(from=1, to=length(q1),by=2)]
q1[seq(from=1, to=length(q1),by=2)] / q1[seq(from=2, to=length(q1),by=2)]
q1[seq(from=1, to=length(q1),by=2)]
q1[seq(from=2, to=length(q1),by=2)]
mean(q1[seq(from=1, to=length(q1),by=2)] / q1[seq(from=2, to=length(q1),by=2)])
y2=as.Date("2020-09-20")
?Date
y2 + "8-03-20"
y2 +1-
y2 +10
y2=as.Date("2020-09-20")
y2
y2 +10
y2 + 8*365 + 3*30 + 20
y2.year
y2(year)
y2
str(y2)
year(y2)
year(y2) + 3
year(y2) = year(y2) + 3
y2
y2=as.Date("2020-09-20")
?as.Date
as.Date(year(y2)+8,month(y2)+3,day(y2)+20)
#,month(y2)+3,day(y2)+20)
?as.Date
as.Date(year(y2)+8)
year(y2)+8
x <- year(y2)+8
str(x)
typeof(x)
typeof(year(y2))
typeof(y2)
str(y)
str(y2)
str(x)
as.Date("year(y2)+8-month(y2)+3-day(y2)+20")
as.Date(year(y2)-8-month(y2)+3-day(y2)+20)
as.Date(year(y2)+8,month(y2)+3,day(y2)+20)
year(y2)+8,month(y2)+3,day(y2)+20
(year(y2)+8, "-",month(y2)+3,"-",day(y2)+20)
print(year(y2)+8, "-",month(y2)+3,"-",day(y2)+20)
#,month(y2)+3,day(y2)+20)
year(y2)+8
#,month(y2)+3,day(y2)+20)
x2<- year(y2)+8
#,month(y2)+3,day(y2)+20)
as.Date(x2)<- c(year(y2)+8,"-",month(y2)+3,"-",day(y2)+20)
#,month(y2)+3,day(y2)+20)
x2<- c(year(y2)+8,"-",month(y2)+3,"-",day(y2)+20)
x2
?year
q4=c("F","M","F","F","M","F","R","R","R")
sum(q4["F"])
sum(q4[["F"]])
q4["F"]
q4==F
q4=="F"
sum(q4=="F")
data.frame(M = sum(q4=="F")-sum(q4=="M"))
tibble(M = sum(q4=="F")-sum(q4=="M"))
(M = sum(q4=="F")-sum(q4=="M"))
M = abs(sum(q4=="F")-sum(q4=="M")), R = abs(sum(q4=="M")-sum(q4=="R")))
M = abs(sum(q4=="F")-sum(q4=="M")), R = abs(sum(q4=="M")-sum(q4=="R"))
c(M = abs(sum(q4=="F")-sum(q4=="M")), R = abs(sum(q4=="M")-sum(q4=="R")))
y2
#4
rm(list=ls())
y2=as.Date("2020-09-20")
y2
y2 <= year(y)+3
y2 <= year(y2)+3
y2 <- year(y2)+3
?date
y2=as.Date("2020-09-20")
c(year(y2),month(y2),day(y2)) <- c(year(y2)+8,month(y2)+3,day(y2)+20)
y2[1]
y2[1]
y2[[1]]
y2[1][1]
y2[[1]][1]
y2[[1]][[1]]
y2[[1]][[[1]]]
y2[year]
?as.Date
y2[[1]][[[2]]]
y2[[1]][[2]]
y2
summary(y2)
str(y2)
y2
y2<- c(year(y2),month(y2),day(y2)) + (8,3,20))
y2<- c(year(y2),month(y2),day(y2)) + c(8,3,20))
y2<- c(year(y2),month(y2),day(y2)) + c(8,3,20)
y2
y2
y2=as.Date("2020-09-20")
y2
summary(y2)
y2[year(y2)]
?year
?year
y[[2]]
y2[[2]]
y2[[1]]
y2[[1]][2]
y2[1][[1]]
y2[1][[2]]
y2[1][[1]]
y2=as.Date("2020-09-20")
y2[1][[1]]
y2[1][[2]]
y3<- year(y2) +c(year(3))
y3<- year(y2) + 3
y3
y3<- as.Date(year(y2) + 3)
y3<- as.Date(paste(year(y2) + 3))
year(8)
?day
Date(y2)
summary(y2)
y2[year(y2)]
y2=as.Date("2020-09-20")
Date(y2)
is.Date(y2)
as.Date(y2+as.Date("8-03-20"))
y3 = as.Date("8-03-20")
y2+y3
y4 = y2+y3
y2+10
day(y3)
days(y3)
y2 + days(y3)
y3 = as_date("8-03-20")
y3 = as.Date.numeric("8-03-20")
y3 = as.Date("8-03-20")
y3 = as.numeric(as.Date("8-03-20"))
y3 = as.Date.numeric("8-03-20")
?as.Date
y3 = as.Date("8-03-20")
y3 = as.numeric(as.Date("8-03-20"))
y4=as.numeric(y2)
as.Date(y3+74)
as.Date(y3+y4)
y3 = as.Date("8-03-20")
y1 = as.Date("2028-12-09")
diff(y2,y1)
y2-y1
y1-y2
265*8+3*30+20
365*8+3*30+20
y3 = as.Date("8-03-20")
#4
rm(list=ls())
y2= as.Date("2020-09-20")
y3 = as.Date("8-03-20")
days(y3)
y2+y3
rm(list=ls())
cbind(as.numeric(c(aa[[1]],aa[[2]],as.character(aa[3]))))
#1
aa=data.frame(x1=c("11","12"),y1=c(T,F),z1=factor(c(2,5)))
cbind(as.numeric(c(aa[[1]],aa[[2]],as.character(aa[3]))))
q1=c(18,72,87,29,26,52)
#
mean(q1[seq(from=1, to=length(q1),by=2)] / q1[seq(from=2, to=length(q1),by=2)])
mean(q1[seq(from=1,by=2)] / q1[seq(from=2, by=2)])
as.Date("2020-09-20") + 8*365.25 + 3*30 + 20
#4 라이브러리 없이 푸는 방법을 모르겠음..
y2=as.Date("2002-09-20")
seq(from=y2, by="year")
seq(from=y2, by="year", length=8)
#4 라이브러리 없이 푸는 방법을 모르겠음..
y2=as.Date("2020-09-20")
seq(from=y2, by="year", length=8)
seq(from=y2, by="year", length=8)[-1]
seq(from=y2, by="year", length=8)
result_date <- seq(y2, by="1 month", length.out=8*12 + 3)[8*12 + 3] + 20
result_date <- seq(from=y2, by="year", length=8)
result_date[length(result_date)]
result_date <- seq(from=y2, by="year", length.out=8)
result_date <- seq(from=y2, by="year", length8)[8]
result_date <- seq(from=y2, by="year", length=8)[8]
seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)
seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3]
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3], by="day", length=20),[20]
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3])+20
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3]+20
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3))[3]+20
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3))[3]
seq(from=y2, by="year", length=8)[8]
seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3))[3]
seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3]
seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3] + 20
seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3]
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3], length=20)[20]
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3], length=20)
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3],by="days" length=20)
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3],by="days", length=20)
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3],by="days", length=20)[20]
#1
aa=data.frame(x1=c("11","12"),y1=c(T,F),z1=factor(c(2,5)))
#
cbind(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]])))
abc=list(a=c(5,10),matrix(c(1,1,1,2,2,2),nrow=2,byrow=T))
#
abc[[1]] * abc[[2]]
q1=c(18,72,87,29,26,52)
#
mean(q1[seq(from=1, to=length(q1),by=2)] / q1[seq(from=2, to=length(q1),by=2)])
#
cbind(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]])))
#1
aa=data.frame(x1=c("11","12"),y1=c(T,F),z1=factor(c(2,5)))
aa
matrix(c(as.nummeric(c(aa[[1]],aa[[2]],as.character(aa[[3]])))))
matrix(c(as.numeric(c(aa[[1]],aa[[2]],as.character(aa[[3]])))),nrow=2)
aa[[2]]
as.numeric(c(aa[[1]],aa[[2]]))
as.numeric(aa[[1]],aa[[2]])
matrix(c(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]]))),nrow=2)
#
cbind(as.numeric(aa[[1]]),as.numeric(aa[[2]]),as.numeric(as.character(aa[[3]])))
q1=c(18,72,87,29,26,52)
seq(from=seq(from=seq(from=y2, by="year", length=8)[8],by="month",length=3)[3],by="days", length=20)[20]
q4=c("F","M","F","F","M","F")
summary(q4)
q7=c("A","C","B","C","A")
gusb(c(c("A","B"),"C"),c("P","NP"),q7)
gsub(c(c("A","B"),"C"),c("P","NP"),q7)
q7=c("A","C","B","C","A")
(q7=c("A","C","B","C","A"))O
(q7=c("A","C","B","C","A"))
gsub(c("A","B","C"),c("P","P","NP"),q7)
sum(q1)
q1=c(72,32,65,28,16)
sum(q1)
max(q1)
min(q1)
(sum(q1)-max(q1)-min(q1))/(length(q1)-2)
q7=c("A","C","B","C","A")
#에서 "A"와 "B"는 "P"로 "C"는 "NP"로 표시되게 하라. 결과의 객체유형은 자유롭게 정할 수 있다
factor(q7)
#에서 "A"와 "B"는 "P"로 "C"는 "NP"로 표시되게 하라. 결과의 객체유형은 자유롭게 정할 수 있다
factor(q7, labels = c("P","P","NP"))
q1
q1[q1>30]
q1[q1<30]+30
c(q1[q1>30],q1[q1<30]+30)
q1
rep(c(1,3,5), 3)
rep(c(1,3,5), each=c(1,3,5))
rep(c(1,3,5), each(1,3,5))
rep(c(1,3,5), each=3)
rep(c(1,3,5), each=c(1,3,5))
seq(c(1,3,5),each=c(1,3,5))
?rep
seq(1,5,2)
rep(seq(1,5,2), 3)
rep(seq(1,5,2), each=3)
rep(seq(1,5,2), each=seq(1,5,2))
rep(seq(1,5,2), each=2))
rep(seq(1,5,2), each=2)
rep(seq(1,5,2), each=(1,3,5))
rep(seq(1,5,2), each=c(1,3,5))
rep(seq(1,5,2), times=seq(1,5,2))
rep(seq(1,5,2), times=seq(1,5,2))
rep(seq(1,5,2), times=seq(1,5,2))[1]
rep(seq(1,5,2), times=seq(1,5,2))
rep(seq(1,5,2), times=seq(1,5,2))[%2==0]
x<-rep(seq(1,5,2), times=seq(1,5,2))[x%2==0]
rep(seq(1,5,2), times=seq(1,5,2))/c(1,2)
q1 = c(88,72,32,65,28,16)
mean(q1[q1>=80] | q1[q1<=20])
q1[q1>=80]
q1[q1<=20]
mean(q1[q1>=80] + q1[q1<=20])
mean(q1[q1>=80 | q1<=20])
q1 = c(88,72,32,65,28,16)
mean(q1[q1>=80 | q1<=20])
mean(q1[q1>=70 | q1<=20])
q1 = c(88,72,32,65,28,16)
q2 = factor(q1)
q2
q2 = factor(q1, breaks(0,60))
q2 = factor(q1, breaks=(0,60))
q2 = factor(q1, breaks=c(0,60))
q2 = factor(q1, breaks(0,60))
q2 = factor(q1, break(0,60))
q2 = factor(q1, break=(0,60))
q2 = cut(q1, breaks=c(0,60))
q2
q2 = cut(q1, breaks=c(0,60))
q2
?cut
q2 = cut(q1, breaks=c(0,60),labels=c("A","B"))
q1 = c(88,72,32,65,28,16)
q2 = factor(q1)
q2
q2 = factor(q1>=60, labels=c("B","A"))
q2
q2 = as.character(factor(q1>=60, labels=c("B","A")))
q2
q3 = cut(q1, breaks=(0,60,100), labels=c("B","A"))
q3 = cut(q1, breaks=(-Inf,60,Inf), labels=c("B","A"))
q2 = cut(q1, breaks=c(-Inf, 60, Inf), labels=c("B", "A"))
q3 = cut(q1, breaks=(-Inf,60,Inf), labels=c("B","A"))
q3 = cut(q1, breaks=(-Inf, 60,Inf), labels=c("B","A"))
q3 = cut(q1, breaks=c(0, 60,100), labels=c("B","A"))
q2
q3
q3 = cut(q1, breaks=c(0, 60), labels=c("B","A"))
q3 = cut(q1, breaks=c(0, 60,100), labels=c("B","A"))
q1 = c(88,72,32,65,28,16)
rm(list=ls())
q1 = c(88,72,32,65,28,16)
q1[seq(1,length(q1)-1)] + q1[seq(2,length(q1))] / 2
(q1[seq(1,length(q1)-1)] + q1[seq(2,length(q1))] )/ 2
c(q1[q1<60],q1[q1>=60]+1)
q1
c(q1[q1<60],q1[q1>=60]+1)
help.search("genotype")
library(MASS)
head(genotype.2)
head(genotype)
head(genotype, 2)
head(women)
head(women$height + women$weight, 5)
