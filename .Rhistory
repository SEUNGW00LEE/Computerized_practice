q2
?cut
q2 = cut(q1, breaks=c(0,60),labels=c("A","B"))
q1 = c(88,72,32,65,28,16)
q2 = factor(q1)
q2
q2 = factor(q1>=60, labels=c("B","A"))
q2
q2 = as.character(factor(q1>=60, labels=c("B","A")))
q2
q3 = cut(q1, breaks=(0,60,100), labels=c("B","A"))
q3 = cut(q1, breaks=(-Inf,60,Inf), labels=c("B","A"))
q2 = cut(q1, breaks=c(-Inf, 60, Inf), labels=c("B", "A"))
q3 = cut(q1, breaks=(-Inf,60,Inf), labels=c("B","A"))
q3 = cut(q1, breaks=(-Inf, 60,Inf), labels=c("B","A"))
q3 = cut(q1, breaks=c(0, 60,100), labels=c("B","A"))
q2
q3
q3 = cut(q1, breaks=c(0, 60), labels=c("B","A"))
q3 = cut(q1, breaks=c(0, 60,100), labels=c("B","A"))
q1 = c(88,72,32,65,28,16)
rm(list=ls())
q1 = c(88,72,32,65,28,16)
q1[seq(1,length(q1)-1)] + q1[seq(2,length(q1))] / 2
(q1[seq(1,length(q1)-1)] + q1[seq(2,length(q1))] )/ 2
c(q1[q1<60],q1[q1>=60]+1)
q1
c(q1[q1<60],q1[q1>=60]+1)
help.search("genotype")
library(MASS)
head(genotype.2)
head(genotype)
head(genotype, 2)
head(women)
head(women$height + women$weight, 5)
for(i in 1:5){print(i)}
res <- vector("double", 5)
for(i in seq_along(res)){
res[i] <- mean(rnorm(10))
}
round(res,3)
my_desc <- function(x, fun){fun(x)}
x <- rnorm(20)
my_desc(x, mean)
my_desc(x, median)
x <- rnorm(2000)
my_desc(x, median)
my_desc(x, mean)
x <- rnorm(20000)
my_desc(x, mean)
my_desc(x, median)
x <- rnorm(2000000000)
my_desc(x, mean)
dd
rm(list=ls())
x <- list(a1=1:5, a2=rnorm(5), a3=c(TRUE,FALSE,TRUE,TRUE))
lapply(x,mean)
sapply(x,mean)
lapply(x,mean)
unlist(lapply(x,mean))
set.seed(1234)
m <- -2:2
res <- vector("double", length(m))
for i in seq_along(res){
res[i] <- mean(rnorm(n=19, mean=m[i], sd=0.5))
i = 1
for (i in seq_along(res)){
res[i] <- mean(rnorm(n=19, mean=m[i], sd=0.5))
}
res
y <- lapply(m, rnorm, n=10,sd=0.5)
sapply(y,mean)
y <- lapply(m, rnorm, n=10,sd=0.5)
y
sapply(y,mean)
A <- matrix(c(0.8,1.3,1.0, 1.1, 1.3, 1.3, 0, 1.2, 0.2, 0.6, 1.4, 0.6), nrow=3)
rownames(A) <- c("Park", "Lee", "Kim")
colnames(A) <- paste0("trial", 1:4)
apply(A,1,mean)
apply(A,1,range)
apply(A,2,mean)
data(Cars93, package = "MASS")
with(Cars93, tapply(MPG.city, Origin, mean))
Cars93
Cars93
with(Cars93, tapply(MPG.city,Origin,mean,simplify = FALSE))
x_g <- with(Cars93, split(MPG.city, Origin))
x_g
str(x_g)
labbply(x_g,mean)
library(dplyr)
Cars93 %>%
group_vy(Origin) %>%
summarise(m=mean(MPG.city), n=n)
Cars93 %>%
group_vy(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
#split(A,B) : A를 B의 값 별로 분리
rm(list=ls())
library(dplyr)
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
library(dplyr)
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n())
Cars93
library(("TASS"))
library(("MASS"))
data(Cars93, package = "MASS")
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
#split(A,B) : A를 B의 값 별로 분리
rm(list=ls())
data(Cars93, package = "MASS")
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n=())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n())
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n())
my_desc <- function(x,...){
m.x <- mean(x,...); sd.x <- sd(x,...)
res <- list(mean=m.x,sd=sd.x)
return(res)
}
with(cars, my_desc(x=dist))
with(airquality, my_desc(x=Ozone, na.rm=TRUE))
my_desc_1 <- function(x,...){
m.x <- mean(x,...); sd.x <- sd(x,...)
list(mean=m.x,sd=sd.x)
}
with(cars1, my_desc(x=dist))
with(cars, my_desc_1(x=dist))
find_roots <- function(a,b,c){
if(a==0){
roots <- c("Not quadratic eqation")
} else{
D <- b^2-4*a*c
if (D > 0){
roots <- c((-b+sqrt(D))/2*a,(-b-sqrt(D))/2*a)
} else if (D==0){
roots <- -b / (2*a)
} else {
roots = c("No real root")
}
}
return(roots)
}
find_roots(1,4,3)
x <- c(10,3,6,9)
y <- c(1,5,4,12)
ifelse(x>y,x,y)
score <- c(80,75,40,98)
grade <- ifelse(score<50,"Fail","Pass")
data.frame(score, grade)
res <- vector("double", 5)
res
for(i in seq_along(res)){
res[i] <- mean(rnorm(10))
}
res
round(res,3)
i = 1
while(i<=5){
print(i)
i = i + 1
}
fac.x <- 1
i <- 1
while(i <= 5){
fac.x <- fac.x * i
cat(i, "!=", fac.x, "\n", sep="")
i = i + 1
}
i <- i + 1
while(i <= 5){
fac.x <- fac.x * i
cat(i, "!=", fac.x, "\n", sep="")
i <- i + 1
}
i <- 1
while(i <= 5){
fac.x <- fac.x * i
cat(i, "!=", fac.x, "\n", sep="")
i <- i + 1
}
fac.x <- 1
i <- 1
while(i <= 5){
fac.x <- fac.x * i
cat(i, "!=", fac.x, "\n", sep="")
i <- i + 1
}
sum.x=0
i=1
while(i<=5){
sum.x = sum.x+i
cat("sum to",i,"=",sum.x)
i = i + 1
}
sum.x=0
i=1
while(i<=5){
sum.x = sum.x+i
cat("sum to",i,"=",sum.x,"\n")
i = i + 1
}
sum.x=0
i=1
while(i<=5){
sum.x = sum.x+i
cat("sum to",i,"=",sum.x,"\n",sep="")
i = i + 1
}
cat("sum to ",i," = ",sum.x,"\n",sep="")
sum.x=0
i=1
while(i<=5){
sum.x = sum.x+i
cat("sum to ",i," = ",sum.x,"\n",sep="")
i = i + 1
}
sum.x=0
x=c(1,1,1,8,7,6)
k=length(k)
k=length(x)
i = 1
sum.x=0
x=c(1,1,1,8,7,6)
k=length(x)
i = 1
while(i <= k){
sum.x=sum.x+x[i]
i = i + 1
}
sum.x/k
i=1
while(i<=10){
if(i//2 ==0){
while(i<=10){
if( i %in% c(2,4,6,8,10)){
sum.x = sum.x + 2*i
}
else{
sum.x = sum.x + i
}
i = i + 1
}
sum.x
i=1
while(i<=10){
if( i %in% c(2,4,6,8,10)){
sum.x = sum.x + 2*i
}
else{
sum.x = sum.x + i
}
i = i + 1
}
sum.x
sum.x=0
i=1
while(i<=10){
if( i %in% c(2,4,6,8,10)){
sum.x = sum.x + 2*i
}
else{
sum.x = sum.x + i
}
i = i + 1
}
sum.x
pivo = vector("int", 12)
pivo = vector("integer", 12)
while(i <= 12){
if(i == 1){
pivo[1] = 0
}
else if(i == 2){
pivo[2] = 1
}
else{
pivo[i] = pivo[i-1] + pivo[i-2]
}
i = i + 1
}
pivo
pivo = vector("integer", 12)
i=1
while(i <= 12){
if(i == 1){
pivo[1] <- 0
}
else if(i == 2){
pivo[2] <- 1
}
else{
pivo[i] <- pivo[i-1] + pivo[i-2]
}
i = i + 1
}
pivo
pivo = vector("integer", 12)
pivo[1] = 0
pivo[1] <- 0
pivo[2] <- 1
while(i <= 10){
pivo[i + 2] <- pivo[i] + pivo[i + 1]
}
pivo
i=1
pivo[1] <- 0
pivo[2] <- 1
while(i <= 10){
pivo[i + 2] <- pivo[i] + pivo[i + 1]
}
pivo[1] <- 0
pivo = vector("integer", 12)
i=1
pivo[1] <- 0
pivo[2] <- 1
while(i <= 10){
pivo[i + 2] <- pivo[i] + pivo[i + 1]
}
pivo = vector("integer", 12)
i=1
pivo[1] <- 0
pivo[2] <- 1
while(i <= 10){
pivo[i + 2] = pivo[i] + pivo[i + 1]
}
i=1
pivo[1] <- 0
pivo[2] <- 1
while(i <= 10){
pivo[i + 2] = pivo[i] + pivo[i + 1]
i = i + 1
}
pivo
set.seed(1234)
m <- -2 : 2
res <- vector("double", length(m))
for i in seq_along(res){
for (i in seq_along(res)){
res[i] <- mean(rnorm(n=10, mean=m[i], sd=0.5))
}
res
m<- -2:2
x <- lapply(m, rnorm, n=10, sd=0.5)
x
sapply(x,mean)
A <- matrix(c(0.8,1.3,1.0, 1.1, 1.3, 1.3, 0, 1.2, 0.2, 0.6, 1.4, 0.6), nrow=3)
A
A
rownames(A) <- c("Park", "Lee", "Kim")
A
colnames(A) <- paste0("trial", 1:4)
A
apply(A,1,mean)
apply(A,1,range)
apply(A,1,mean)
apply(A,1,mean)
A <- matrix(c(0.8,1.3,1.0, 1.1, 1.3, 1.3, 0, 1.2, 0.2, 0.6, 1.4, 0.6), nrow=3)
A
rownames(A) <- c("Park", "Lee", "Kim")
colnames(A) <- paste0("trial", 1:4)
A
apply(A,1,mean)
apply(A,1,range)
apply(A,2,mean)
data(Cars93, package = "MASS")
apply(A,1,mean)
apply(A,1,range)
apply(A,2,mean)
data(Cars93, package = "MASS")
with(Cars93, tapply(MPG.city, Origin, mean))
Cars93
with(Cars93, tapply(MPG.city,Origin,mean,simplify = FALSE))
with(Cars93, tapply(MPG.city, Origin, mean))
Cars93
with(Cars93, tapply(MPG.city,Origin,mean,simplify = FALSE))
x_g <- with(Cars93, split(MPG.city, Origin))
x_g
x_g
str(x_g)
labbply(x_g,mean)
labbply(x_g,mean)
x_g <- with(Cars93, split(MPG.city, Origin))
x_g
str(x_g)
labbply(x_g,mean)
labply(x_g,mean)
#' tapply
#' tapply(X, INDEX, FUN, simplify=TRUE)
MPG %>% View()
library(dplyr)
MPG %>% View()
MPG.city %>% View()
Cars93 %>% View()
data(Cars93, package = "MASS")
with(Cars93, tapply(MPG.city, Origin, mean))
data(Cars93, package = "MASS")
data(Cars93, package = "MASS")
rm(list=ls())
library(dplyr)
Cars93 %>% View()
library(MASS)
Cars93 %>% View()
data(Cars93, package = "MASS")
data(Cars93, package = "MASS")
with(Cars93, tapply(MPG.city, Origin, mean))
Cars93
with(Cars93, tapply(MPG.city,Origin,mean,simplify = FALSE))
x_g <- with(Cars93, split(MPG.city, Origin))
x_g
str(x_g)
labply(x_g,mean)
lapply(x_g,mean)
#split(A,B) : A를 B의 값 별로 분리
rm(list=ls())
#split(A,B) : A를 B의 값 별로 분리
rm(list=ls())
library(dplyr)
data(Cars93, package = "MASS")
Cars93
Cars93 %>%
group_by(Origin) %>%
summarise(m=mean(MPG.city), n=n())
airquality
airquality %>% View()
airquality %>% View()
airs <- airquality %>%
select(-c(Month, Day))
airs <- airquality %>%
select(-Month, -Day))
airs <- airquality %>%
dplyr::select(-Month, -Day))
airs %>%  View()
airs <- airquality %>%
dplyr::select(-Month, -Day))
airs <- airquality %>%
dplyr::select(-Month, -Day)
airs %>%  View()
apply(airs,2,mean)
apply(airs,2,mean,na.rm=TRUE)
library(tidyverse)
x <- list(a1=1:5, a2=rnorm(5), a3=c(TRUE, FALSE, TRUE, TRUE))
x
lapply(x, mean)
map(x,mean)
map_dbl(x,mean)
map_int(x,mean)
airs
airs %>%
map_dbl(function (x) sum(x, na.rm=TRUE)/sum(!is.na(x)))
airs %>%
map_dpl(~ sum(.x,na.rm=TRUE) / sum(!is.na(.x)))
airs %>%
map_dbl(~ sum(.x,na.rm=TRUE) / sum(!is.na(.x)))
df1 <- list(x1=1:3, x2=2:4, x3=3:6)
df1
map_int(df1,2)
df2 <- list(x1=rnorm(n=5, mean=-1), x2=rnorm(n=5, mean=1)) %>% map(summary)
df2
source("~/Desktop/konkuk/2023 - 2/전산실습/forFinal.R", echo=TRUE)
df2 %>%
map_dbl("Mean")
df2 <- list(x1=rnorm(n=5, mean=-1), x2=rnorm(n=5, mean=1)) %>% map(summary)
df2 %>%
map_dbl("Mean")
df2 <- list(x1=rnorm(n=5, mean=-1), x2=rnorm(n=5, mean=1)) %>% map(summary)
df2
mu <- c(x1= -5, x2=1)
mu <- c(x1= -5, x2= 5)
sigma <- c(x1=2,x2=1)
mu <- c(x1= -5, x2= 5)
sigma <- c(x1=2,x2=1)
map2(.x=mu,.y=sigma, rnrom, n=5)
map2(.x=mu,.y=sigma, rnorm, n=5)
mpa2_dfc(.x = mu, .y = sigma, rnorm, n=5)
map2_dfc(.x = mu, .y = sigma, rnorm, n=5)
map2_dfc(.x = mu, .y = sigma, rnorm, n=3)
